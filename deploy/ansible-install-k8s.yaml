---
- hosts: worker
  become: yes
  tasks:
    - name: Purge specified packages
      ansible.builtin.apt:
        name:
          - docker
          - docker-engine
          - docker.io
          - containerd
          - runc
        state: absent
        purge: yes  # 同时删除配置文件
        autoremove: yes  # 自动移除未使用的依赖
    - name: Update apt repo
      apt:
        update_cache: yes
    - name: Install dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
    # 安装 containerd
    - name: Add Docker official GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        filename: docker-ce.list
    - name: Install containerd with dependencies
      apt:
        name:
          - containerd.io
          - containernetworking-plugins
        update_cache: yes
    - name: Generate default containerd config
      shell: |
        mkdir -p /etc/containerd
        containerd config default > /etc/containerd/config.toml
    - name: Enable systemd cgroup driver
      replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'
      notify: restart containerd

    # 内核配置
    - name: Load kernel modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter

    - name: Configure sysctl parameters
      sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
        sysctl_set: yes
        reload: yes
      loop:
        - { key: 'net.bridge.bridge-nf-call-iptables', value: '1' }
        - { key: 'net.ipv4.ip_forward', value: '1' }


    # Kubernetes 安装部分
    - name: Ensure APT keyring directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: 0755
    - name: Add Kubernetes GPG key
      apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
        keyring: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        state: present
    - name: Add Kubernetes repository
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /"
        state: present
        filename: kubernetes.list
    - name: Update package index
      apt:
        update_cache: yes
    - name: Install Kubernetes packages
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
    - name: Hold Kubernetes packages
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl

    - name: 获取 enp0s8 的 IP
      set_fact:
        node_ip: "{{ ansible_facts.enp0s8.ipv4.address }}"

    - name: 添加 --node-ip 到 KUBELET_EXTRA_ARGS
      lineinfile:
        path: /etc/default/kubelet
        regexp: '^KUBELET_EXTRA_ARGS='
        line: 'KUBELET_EXTRA_ARGS="--node-ip={{ node_ip }}"'
        create: yes
      notify: restart kubelet

  handlers:
    - name: restart containerd
      systemd:
        name: containerd
        state: restarted
        daemon_reload: yes
    - name: restart kubelet
      systemd:
        name: kubelet
        state: restarted

- hosts: control
  become: yes
  tasks:
    - name: 创建 kubeadm token
      command: kubeadm token create
      register: token_output
    - name: 保存 join 命令所需的信息
      set_fact:
        kubeadm_token: "{{ token_output.stdout }}"
- hosts: worker
  become: yes
  tasks:
    - name: 使用获取的 token 加入 Kubernetes 集群
      shell: >
        kubeadm join 192.168.31.134:6443
        --token {{ hostvars['localhost'].kubeadm_token }}
        --discovery-token-ca-cert-hash <sha256>